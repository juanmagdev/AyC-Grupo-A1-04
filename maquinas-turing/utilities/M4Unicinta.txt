name: TM4-UNICINTA
init: q0
accept: qA

//LOS NOMBRES DE LOS ESTADOS NO SON LOS MISMOS, PARA PODER OBSERVAR MEJOR CÓMO TRABAJA LA TM
q0,#
pointer_f,&,>

//Pointer_f busca el siguiente # y lo vuelve puntero ($). Si no hay más cadenas, comprobamos si hemos acabado
pointer_f,0
pointer_f,0,>

pointer_f,1
pointer_f,1,>

pointer_f,#
pointer_b,$,<

pointer_f,U
pointer_f,U,>

pointer_f,_
test,_,<

//pointer_b vuelve al puntero inicial (&) para comparar
pointer_b,0
pointer_b,0,<

pointer_b,1
pointer_b,1,<

pointer_b,U
pointer_b,U,<

pointer_b,&
read,&,>

//read busca el siguiente caracter del primer string para comparar. No se pierde informacion al transformar 0,1 por o,i al leer los caracteres
read,0
jump0,o,>

read,1
jump1,i,>

read,o
read,o,>

read,i
read,i,>

read,U
abort,U,>

read,$
sub,$,>

//jump salta al puntero $ acarreando la información del caracter leído
jump0,0
jump0,0,>

jump0,1
jump0,1,>

jump0,$
compare0,$,>

jump0,U
jump0,U,>

jump1,0
jump1,0,>

jump1,1
jump1,1,>

jump1,$
compare1,$,>

jump1,U
jump1,U,>

//compare busca el siguiente caracter sin leer del segundo string y comprueban que si iguales. Al leer reemplaza 0,1 por o,i.
compare0,o
compare0,o,>

compare0,i
compare0,i,>

compare0,0
igual,o,<

compare0,1
diferente,1,<

compare0,#
diferente,#,<

compare0,_
diferente,_,<

compare1,o
compare1,o,>

compare1,i
compare1,i,>

compare1,0
diferente,0,<

compare1,1
igual,i,<

compare1,#
diferente,#,<

compare1,_
diferente,_,<

//igual hace que el proceso de comparación siga, no altera caracteres
igual,o
igual,o,<

igual,i
igual,i,<

igual,0
igual,0,<

igual,1
igual,1,<

igual,U
igual,U,<

igual,$
igual,$,<

igual,&
read,&,>

//diferente detiene el proceso de comparar. (o,i) vuelve a ser (0,1) y marca el puntero $ como usado (U)
diferente,o
diferente,0,<

diferente,i
diferente,1,<

diferente,0
diferente,0,<

diferente,1
diferente,1,<

diferente,U
diferente,U,<

diferente,$
diferente,U,<

diferente,&
pointer_f,&,>

//abort sucede cuando el primer string a comparar es más corto que el segundo. Salta hasta el inicio del segundo string
abort,0
abort,0,>

abort,1
abort,1,>

abort,U
abort,U,>

abort,$
sub,$,>

abort,_
test,_,<

//sub comprueba si el primero es un substring estrictamente menor del segundo (y no son iguales las cadenas)
sub,o
sub,o,>

sub,i
sub,i,>

sub,0
diferente,0,<

sub,1
diferente,1,<

//test comprueba que hemos agotado todos los strings
test,0
test,0,<

test,1
test,1,<

test,o
test,o,<

test,i
test,i,<

test,U
reset,#,<

test,&
qA,#,-

//reset reestablece los punteros U como # para comenzar nueva iteracion
reset,0
reset,0,<

reset,1
reset,1,<

reset,U
reset,#,<

reset,&
new_pointer,#,>

//new_pointer establece un nuevo puntero &
new_pointer,0
new_pointer,0,>

new_pointer,1
new_pointer,1,>

new_pointer,#
pointer_f,&,>

new_pointer,_
test,_,<
